# Optimized CI/CD for Refactored Attendance System
# Deploy Python app to Azure Web App - testattend

name: Build and deploy Refactored Attendance System to Azure Web App - testattend

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'  # Updated to Python 3.11

jobs:
  # Build and Test Job
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          echo "Virtual environment created and activated"

      - name: Install dependencies
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Dependencies installed successfully"

      # Code Quality Check
      - name: Lint with flake8
        run: |
          source venv/bin/activate
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          # Only check main application files, exclude dependencies and virtual environment
          flake8 *.py utils/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings for comprehensive check
          flake8 *.py utils/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Test Application Imports
      - name: Test application imports
        run: |
          source venv/bin/activate
          python -c "
          import os
          os.environ['TEACHER_PASSWORD'] = 'test'
          os.environ['SECRET_KEY'] = 'test-key'
          try:
              import app
              print('‚úì App import successful')
              import config
              print('‚úì Config import successful')
              import models
              print('‚úì Models import successful')
              import services
              print('‚úì Services import successful')
              import routes
              print('‚úì Routes import successful')
              from app import app
              print('‚úì Flask app created successfully')
              print('All imports and basic tests passed!')
          except Exception as e:
              print(f'‚úó Import test failed: {e}')
              exit(1)
          "

      # Create optimized deployment package
      - name: Create deployment package
        run: |
          # Remove development files and create clean deployment package
          rm -rf venv/
          rm -rf __pycache__/
          find . -name "*.pyc" -delete
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          
          # Create deployment zip excluding unnecessary files
          zip -r release.zip . \
            -x "*.git*" \
            -x "*venv*" \
            -x "*.env*" \
            -x "*__pycache__*" \
            -x "*.pyc" \
            -x "logs/*" \
            -x "app_refactored.py" \
            -x "requirements_updated.txt" \
            -x "README_refactored.md" \
            -x "static/js/main_refactored.js" \
            -x "templates/index_refactored.html" \
            -x ".github/workflows/azure-deploy.yml" \
            -x ".github/workflows/ci.yml"
          
          echo "Deployment package created successfully"
          ls -la release.zip

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  # Deploy Job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: |
          unzip -q release.zip
          echo "Deployment files extracted"
          ls -la

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_7E9F0475FF954BFA80348DA86A7B5EB1 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_9E1B229323804578B04718E28E994E55 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_77D538DB44004A1C8DF16E4FCF687784 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'testattend'
          slot-name: 'Production'

      # Post-deployment verification
      - name: Post-deployment health check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          # Basic health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://testattend.azurewebsites.net/ || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úì Deployment successful! App is responding with HTTP 200"
            echo "üöÄ Refactored Attendance System is live at: https://testattend.azurewebsites.net/"
          else
            echo "‚ö†Ô∏è Deployment completed but app returned HTTP $response"
            echo "Check Azure logs for any issues"
          fi

  # Notification Job (optional)
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ Deployment Successful!"
            echo "üì± Refactored Attendance System is now live"
            echo "üîó URL: https://testattend.azurewebsites.net/"
            echo "‚ú® Features: Modular architecture, improved security, React components"
          else
            echo "‚ùå Deployment Failed"
            echo "Please check the logs and retry"
          fi